Problem

Examples & Test cases
Data Structures
- deck as an array of 52 cards
- hand is a nested array of suit and card value
hand = [
['H', '2'],
['S', 'J']...
]

- show first card in dealer and players hand
- add cards
- sum value cards
- order doesn't matter?

Calculating Aces
- default to 11
- sum hand; if 11 causes hand to bust, then ace value is 1

1. Initialize deck
2. Deal cards to player and dealer
3. Player turn: hit or stay
   - while loop repeat until bust or stay
4. If player bust, dealer wins.
5. Dealer turn: hit or stay
   - repeat until total >= 17
6. If dealer busts, player wins.
7. Compare cards and declare winner.

helper functions
- dealStartingHand(deck)
- shuffleCards(deck) --> use Fisher-Yates formula
  while cards in playerHand < 2:
  - dealCard(playerHand, deck)
  - dealCard(dealerHand, deck)


- alternatePlayers(currentTurn)
  - track who should be dealt a hand
  - input --> player that just took dealer
  - output --> other playershand
  if currentTurn === player, set currentTurn === dealer

- busted(total(sum))
  - sum up hand and see if it > 21


- showHands(playerHand, dealerHand)
  - log "Dealer has": {card value} and unknown card
  - log: "You have:" {list of all card values}

- dealCard(currentTurn, deck)
  - select card from remaining deck at random
  - remove selected card from deck
  - add it to hand of the currentTurn

- total(hand)
  - get value of all cards in hand
  - if there is an Ace, determine if value is 11 or 1
  - if card is J, Q, or K, value is 10
  - return sum of hand


- dealerTurn(dealerHand)
  - total(hand)
  - if total <= 17, dealCard(dealderHand)
  - total(hand)
  - if >17, stay
  - Otherwise, go to #2

- playerTurn(playerHand)
  - Ask player to hit or stay.
  - If stay, stop asking.
  - Otherwise, go to #1.

- calculateWinner(playerSum, dealerSum)
  - compare playerSum and dealerSum for closest to 21
  - print winner
