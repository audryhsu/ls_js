{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\",\"filename\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\\\\clean.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.6:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice",
      "filename": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\clean.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\clean.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\clean.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\",
        "sourceFileName": "clean.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n// Given a string that consists of some words and an assortment of non-alphabetic characters, write a function that returns that string with all of the non-alphabetic characters replaced by spaces. If one or more non-alphabetic characters occur in a row, you should only have one space in the result (i.e., the result string should never have consecutive spaces).\n// in - string\n// out - string\n// no consectuvie spaces\n// remove or filter out non-alpha chars and replace with space\n//algo - loop through the string\n// if char is alphabetic, add it to clean string\n// if not alphabetic\n// check if last char in clean string is a space\n//if not, add a space\n// else, continue loop\n//return clean string\n// #2 using for loops\n// function cleanUp(str) {\n//   let cleanStr = '';\n//   for (var i = 0; i < str.length; i++) {\n//     if (isAlphabetic(str[i])) cleanStr += str[i];\n//\n//     // Key: input str and cleanStr do not have the same indicies\n//     else if (cleanStr[cleanStr.length - 1] !== ' ') cleanStr += ' ';\n//   }\n//   console.log(cleanStr);\n// }\n//\n// function isAlphabetic(char) {\n//   return ((char >= \"a\" && char <= \"z\") || (char >= \"A\" && char <= \"Z\"));\n// }\n// #1 using regex solutions\n// the + sign will treat consecutive nonalpha characters as a single match, so only one whitespace will replace\nfunction cleanUp(str) {\n  let nonalpha = /[^a-z]+/ig;\n  console.log(str.replace(nonalpha, \" \"));\n} // console.log(str.replace(/[^\\w\\s]+/g, \" \").replace(/\\s+/g, \" \"));\n\n\ncleanUp(\"---what's my +*& line?\"); // \" what s my line \"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsZWFuLmpzIl0sIm5hbWVzIjpbImNsZWFuVXAiLCJzdHIiLCJub25hbHBoYSIsImNvbnNvbGUiLCJsb2ciLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDRTtBQUNBO0FBQ0E7QUFDRjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQSxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtBQUNwQixNQUFJQyxRQUFRLEdBQUcsV0FBZjtBQUNBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsR0FBRyxDQUFDSSxPQUFKLENBQVlILFFBQVosRUFBc0IsR0FBdEIsQ0FBWjtBQUNELEMsQ0FDRDs7O0FBRUFGLE9BQU8sQ0FBQyx3QkFBRCxDQUFQLEMsQ0FBc0MiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxhdWRyeVxcc291cmNlXFxyZXBvc1xcbHNfanNfcHJlcFxcanMxMDlfcHJhY3RpY2VcXCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdpdmVuIGEgc3RyaW5nIHRoYXQgY29uc2lzdHMgb2Ygc29tZSB3b3JkcyBhbmQgYW4gYXNzb3J0bWVudCBvZiBub24tYWxwaGFiZXRpYyBjaGFyYWN0ZXJzLCB3cml0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGF0IHN0cmluZyB3aXRoIGFsbCBvZiB0aGUgbm9uLWFscGhhYmV0aWMgY2hhcmFjdGVycyByZXBsYWNlZCBieSBzcGFjZXMuIElmIG9uZSBvciBtb3JlIG5vbi1hbHBoYWJldGljIGNoYXJhY3RlcnMgb2NjdXIgaW4gYSByb3csIHlvdSBzaG91bGQgb25seSBoYXZlIG9uZSBzcGFjZSBpbiB0aGUgcmVzdWx0IChpLmUuLCB0aGUgcmVzdWx0IHN0cmluZyBzaG91bGQgbmV2ZXIgaGF2ZSBjb25zZWN1dGl2ZSBzcGFjZXMpLlxyXG5cclxuXHJcbi8vIGluIC0gc3RyaW5nXHJcbi8vIG91dCAtIHN0cmluZ1xyXG4vLyBubyBjb25zZWN0dXZpZSBzcGFjZXNcclxuLy8gcmVtb3ZlIG9yIGZpbHRlciBvdXQgbm9uLWFscGhhIGNoYXJzIGFuZCByZXBsYWNlIHdpdGggc3BhY2VcclxuXHJcbi8vYWxnbyAtIGxvb3AgdGhyb3VnaCB0aGUgc3RyaW5nXHJcbi8vIGlmIGNoYXIgaXMgYWxwaGFiZXRpYywgYWRkIGl0IHRvIGNsZWFuIHN0cmluZ1xyXG4vLyBpZiBub3QgYWxwaGFiZXRpY1xyXG4gIC8vIGNoZWNrIGlmIGxhc3QgY2hhciBpbiBjbGVhbiBzdHJpbmcgaXMgYSBzcGFjZVxyXG4gIC8vaWYgbm90LCBhZGQgYSBzcGFjZVxyXG4gIC8vIGVsc2UsIGNvbnRpbnVlIGxvb3BcclxuLy9yZXR1cm4gY2xlYW4gc3RyaW5nXHJcblxyXG4vLyAjMiB1c2luZyBmb3IgbG9vcHNcclxuLy8gZnVuY3Rpb24gY2xlYW5VcChzdHIpIHtcclxuLy8gICBsZXQgY2xlYW5TdHIgPSAnJztcclxuLy8gICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgaWYgKGlzQWxwaGFiZXRpYyhzdHJbaV0pKSBjbGVhblN0ciArPSBzdHJbaV07XHJcbi8vXHJcbi8vICAgICAvLyBLZXk6IGlucHV0IHN0ciBhbmQgY2xlYW5TdHIgZG8gbm90IGhhdmUgdGhlIHNhbWUgaW5kaWNpZXNcclxuLy8gICAgIGVsc2UgaWYgKGNsZWFuU3RyW2NsZWFuU3RyLmxlbmd0aCAtIDFdICE9PSAnICcpIGNsZWFuU3RyICs9ICcgJztcclxuLy8gICB9XHJcbi8vICAgY29uc29sZS5sb2coY2xlYW5TdHIpO1xyXG4vLyB9XHJcbi8vXHJcbi8vIGZ1bmN0aW9uIGlzQWxwaGFiZXRpYyhjaGFyKSB7XHJcbi8vICAgcmV0dXJuICgoY2hhciA+PSBcImFcIiAmJiBjaGFyIDw9IFwielwiKSB8fCAoY2hhciA+PSBcIkFcIiAmJiBjaGFyIDw9IFwiWlwiKSk7XHJcbi8vIH1cclxuXHJcbi8vICMxIHVzaW5nIHJlZ2V4IHNvbHV0aW9uc1xyXG4vLyB0aGUgKyBzaWduIHdpbGwgdHJlYXQgY29uc2VjdXRpdmUgbm9uYWxwaGEgY2hhcmFjdGVycyBhcyBhIHNpbmdsZSBtYXRjaCwgc28gb25seSBvbmUgd2hpdGVzcGFjZSB3aWxsIHJlcGxhY2VcclxuZnVuY3Rpb24gY2xlYW5VcChzdHIpIHtcclxuICBsZXQgbm9uYWxwaGEgPSAvW15hLXpdKy9pZztcclxuICBjb25zb2xlLmxvZyhzdHIucmVwbGFjZShub25hbHBoYSwgXCIgXCIpKTtcclxufVxyXG4vLyBjb25zb2xlLmxvZyhzdHIucmVwbGFjZSgvW15cXHdcXHNdKy9nLCBcIiBcIikucmVwbGFjZSgvXFxzKy9nLCBcIiBcIikpO1xyXG5cclxuY2xlYW5VcChcIi0tLXdoYXQncyBteSArKiYgbGluZT9cIik7ICAgIC8vIFwiIHdoYXQgcyBteSBsaW5lIFwiXHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "clean.js"
      ],
      "names": [
        "cleanUp",
        "str",
        "nonalpha",
        "console",
        "log",
        "replace"
      ],
      "mappings": ";;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACE;AACA;AACA;AACF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAIC,QAAQ,GAAG,WAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,OAAJ,CAAYH,QAAZ,EAAsB,GAAtB,CAAZ;AACD,C,CACD;;;AAEAF,OAAO,CAAC,wBAAD,CAAP,C,CAAsC",
      "sourceRoot": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\",
      "sourcesContent": [
        "// Given a string that consists of some words and an assortment of non-alphabetic characters, write a function that returns that string with all of the non-alphabetic characters replaced by spaces. If one or more non-alphabetic characters occur in a row, you should only have one space in the result (i.e., the result string should never have consecutive spaces).\r\n\r\n\r\n// in - string\r\n// out - string\r\n// no consectuvie spaces\r\n// remove or filter out non-alpha chars and replace with space\r\n\r\n//algo - loop through the string\r\n// if char is alphabetic, add it to clean string\r\n// if not alphabetic\r\n  // check if last char in clean string is a space\r\n  //if not, add a space\r\n  // else, continue loop\r\n//return clean string\r\n\r\n// #2 using for loops\r\n// function cleanUp(str) {\r\n//   let cleanStr = '';\r\n//   for (var i = 0; i < str.length; i++) {\r\n//     if (isAlphabetic(str[i])) cleanStr += str[i];\r\n//\r\n//     // Key: input str and cleanStr do not have the same indicies\r\n//     else if (cleanStr[cleanStr.length - 1] !== ' ') cleanStr += ' ';\r\n//   }\r\n//   console.log(cleanStr);\r\n// }\r\n//\r\n// function isAlphabetic(char) {\r\n//   return ((char >= \"a\" && char <= \"z\") || (char >= \"A\" && char <= \"Z\"));\r\n// }\r\n\r\n// #1 using regex solutions\r\n// the + sign will treat consecutive nonalpha characters as a single match, so only one whitespace will replace\r\nfunction cleanUp(str) {\r\n  let nonalpha = /[^a-z]+/ig;\r\n  console.log(str.replace(nonalpha, \" \"));\r\n}\r\n// console.log(str.replace(/[^\\w\\s]+/g, \" \").replace(/\\s+/g, \" \"));\r\n\r\ncleanUp(\"---what's my +*& line?\");    // \" what s my line \"\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1630591467814
  },
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\",\"filename\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\\\\sum.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"C:\\\\Users\\\\audry\\\\source\\\\repos\\\\ls_js_prep\\\\js109_practice\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.6:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice",
      "filename": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\sum.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\sum.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\sum.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\",
        "sourceFileName": "sum.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n// Write a function that takes one argument, a positive integer, and returns the sum of its digits. Do this without using for, while, or do...while loops - instead, use a series of method calls to perform the sum.\nsum(23); // 5\n\nsum(496); // 19\n\nsum(123456789); // 45\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1bS5qcyJdLCJuYW1lcyI6WyJzdW0iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFHQUEsR0FBRyxDQUFDLEVBQUQsQ0FBSCxDLENBQW1COztBQUNuQkEsR0FBRyxDQUFDLEdBQUQsQ0FBSCxDLENBQW1COztBQUNuQkEsR0FBRyxDQUFDLFNBQUQsQ0FBSCxDLENBQW1CIiwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcYXVkcnlcXHNvdXJjZVxccmVwb3NcXGxzX2pzX3ByZXBcXGpzMTA5X3ByYWN0aWNlXFwiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXcml0ZSBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgb25lIGFyZ3VtZW50LCBhIHBvc2l0aXZlIGludGVnZXIsIGFuZCByZXR1cm5zIHRoZSBzdW0gb2YgaXRzIGRpZ2l0cy4gRG8gdGhpcyB3aXRob3V0IHVzaW5nIGZvciwgd2hpbGUsIG9yIGRvLi4ud2hpbGUgbG9vcHMgLSBpbnN0ZWFkLCB1c2UgYSBzZXJpZXMgb2YgbWV0aG9kIGNhbGxzIHRvIHBlcmZvcm0gdGhlIHN1bS5cclxuXHJcblxyXG5zdW0oMjMpOyAgICAgICAgICAgLy8gNVxyXG5zdW0oNDk2KTsgICAgICAgICAgLy8gMTlcclxuc3VtKDEyMzQ1Njc4OSk7ICAgIC8vIDQ1XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "sum.js"
      ],
      "names": [
        "sum"
      ],
      "mappings": ";;AAAA;AAGAA,GAAG,CAAC,EAAD,CAAH,C,CAAmB;;AACnBA,GAAG,CAAC,GAAD,CAAH,C,CAAmB;;AACnBA,GAAG,CAAC,SAAD,CAAH,C,CAAmB",
      "sourceRoot": "C:\\Users\\audry\\source\\repos\\ls_js_prep\\js109_practice\\",
      "sourcesContent": [
        "// Write a function that takes one argument, a positive integer, and returns the sum of its digits. Do this without using for, while, or do...while loops - instead, use a series of method calls to perform the sum.\r\n\r\n\r\nsum(23);           // 5\r\nsum(496);          // 19\r\nsum(123456789);    // 45\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1632404108887
  }
}